/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common'

export interface EWSInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'MAINTAINER_ROLE()': FunctionFragment
    'appendAllowedPages(string,string,string[])': FunctionFragment
    'configs(bytes32)': FunctionFragment
    'dc()': FunctionFragment
    'getAllowMaintainerAccess(bytes32)': FunctionFragment
    'getAllowedPages(bytes32,bytes32)': FunctionFragment
    'getAllowedPagesSlice(bytes32,bytes32,uint256,uint256)': FunctionFragment
    'getFees(string,string,uint256)': FunctionFragment
    'getLandingPage(bytes32,bytes32)': FunctionFragment
    'getNumAllowedPages(bytes32,bytes32)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getSubdomains(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'landingPageFee()': FunctionFragment
    'perAdditionalPageFee()': FunctionFragment
    'perSubdomainFee()': FunctionFragment
    'remove(string,string)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revenueAccount()': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'setDc(address)': FunctionFragment
    'setLandingPageFee(uint256)': FunctionFragment
    'setPerAdditionalPageFee(uint256)': FunctionFragment
    'setPerSubdomainFee(uint256)': FunctionFragment
    'setRevenueAccount(address)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'toggleMaintainerAccess(string)': FunctionFragment
    'update(string,string,uint8,string,string[],bool)': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'MAINTAINER_ROLE'
      | 'appendAllowedPages'
      | 'configs'
      | 'dc'
      | 'getAllowMaintainerAccess'
      | 'getAllowedPages'
      | 'getAllowedPagesSlice'
      | 'getFees'
      | 'getLandingPage'
      | 'getNumAllowedPages'
      | 'getRoleAdmin'
      | 'getSubdomains'
      | 'grantRole'
      | 'hasRole'
      | 'landingPageFee'
      | 'perAdditionalPageFee'
      | 'perSubdomainFee'
      | 'remove'
      | 'renounceRole'
      | 'revenueAccount'
      | 'revokeRole'
      | 'setDc'
      | 'setLandingPageFee'
      | 'setPerAdditionalPageFee'
      | 'setPerSubdomainFee'
      | 'setRevenueAccount'
      | 'supportsInterface'
      | 'toggleMaintainerAccess'
      | 'update'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAINTAINER_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'appendAllowedPages',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'configs',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'dc', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getAllowMaintainerAccess',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getAllowedPages',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getAllowedPagesSlice',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getFees',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getLandingPage',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getNumAllowedPages',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getSubdomains',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'landingPageFee',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'perAdditionalPageFee',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'perSubdomainFee',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'remove',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'revenueAccount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setDc',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setLandingPageFee',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setPerAdditionalPageFee',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setPerSubdomainFee',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setRevenueAccount',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'toggleMaintainerAccess',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'update',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>
    ]
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAINTAINER_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'appendAllowedPages',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'configs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dc', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAllowMaintainerAccess',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAllowedPages',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAllowedPagesSlice',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getFees', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getLandingPage',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNumAllowedPages',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSubdomains',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'landingPageFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'perAdditionalPageFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'perSubdomainFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'remove', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'revenueAccount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setDc', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setLandingPageFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPerAdditionalPageFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPerSubdomainFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setRevenueAccount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'toggleMaintainerAccess',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'EWSActivated(string,bytes32,string,bytes32)': EventFragment
    'EWSAdditionPageUpdate(bytes32,bytes32,string[],string[])': EventFragment
    'EWSAppendedAdditionalPages(bytes32,bytes32,string[])': EventFragment
    'EWSDCContractChanged(address,address)': EventFragment
    'EWSLandingPageFeeChanged(uint256,uint256)': EventFragment
    'EWSMaintainerPermissionChanged(bytes32,bool)': EventFragment
    'EWSPerAdditionalPageFeeChanged(uint256,uint256)': EventFragment
    'EWSPerSubdomainFeeChanged(uint256,uint256)': EventFragment
    'EWSSubdomainRemoved(string,bytes32,string,bytes32)': EventFragment
    'EWSTypeUpdate(bytes32,bytes32,uint8,uint8)': EventFragment
    'EWSUpdate(bytes32,bytes32,string,string)': EventFragment
    'RevenueAccountChanged(address,address)': EventFragment
    'RevenueWithdrawn(address,uint256)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'EWSActivated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSAdditionPageUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSAppendedAdditionalPages'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSDCContractChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSLandingPageFeeChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'EWSMaintainerPermissionChanged'
  ): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'EWSPerAdditionalPageFeeChanged'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSPerSubdomainFeeChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSSubdomainRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSTypeUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EWSUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RevenueAccountChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RevenueWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
}

export interface EWSActivatedEventObject {
  name: string
  node: string
  subdomain: string
  label: string
}
export type EWSActivatedEvent = TypedEvent<
  [string, string, string, string],
  EWSActivatedEventObject
>

export type EWSActivatedEventFilter = TypedEventFilter<EWSActivatedEvent>

export interface EWSAdditionPageUpdateEventObject {
  node: string
  label: string
  additionalPagesFrom: string[]
  additionalPagesTo: string[]
}
export type EWSAdditionPageUpdateEvent = TypedEvent<
  [string, string, string[], string[]],
  EWSAdditionPageUpdateEventObject
>

export type EWSAdditionPageUpdateEventFilter =
  TypedEventFilter<EWSAdditionPageUpdateEvent>

export interface EWSAppendedAdditionalPagesEventObject {
  node: string
  label: string
  additionalPages: string[]
}
export type EWSAppendedAdditionalPagesEvent = TypedEvent<
  [string, string, string[]],
  EWSAppendedAdditionalPagesEventObject
>

export type EWSAppendedAdditionalPagesEventFilter =
  TypedEventFilter<EWSAppendedAdditionalPagesEvent>

export interface EWSDCContractChangedEventObject {
  from: string
  to: string
}
export type EWSDCContractChangedEvent = TypedEvent<
  [string, string],
  EWSDCContractChangedEventObject
>

export type EWSDCContractChangedEventFilter =
  TypedEventFilter<EWSDCContractChangedEvent>

export interface EWSLandingPageFeeChangedEventObject {
  landingPageFeeFrom: BigNumber
  landingPageFeeTo: BigNumber
}
export type EWSLandingPageFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EWSLandingPageFeeChangedEventObject
>

export type EWSLandingPageFeeChangedEventFilter =
  TypedEventFilter<EWSLandingPageFeeChangedEvent>

export interface EWSMaintainerPermissionChangedEventObject {
  node: string
  maintainerAllowed: boolean
}
export type EWSMaintainerPermissionChangedEvent = TypedEvent<
  [string, boolean],
  EWSMaintainerPermissionChangedEventObject
>

export type EWSMaintainerPermissionChangedEventFilter =
  TypedEventFilter<EWSMaintainerPermissionChangedEvent>

export interface EWSPerAdditionalPageFeeChangedEventObject {
  perAdditionalPageFeeFrom: BigNumber
  perAdditionalPageFeeTo: BigNumber
}
export type EWSPerAdditionalPageFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EWSPerAdditionalPageFeeChangedEventObject
>

export type EWSPerAdditionalPageFeeChangedEventFilter =
  TypedEventFilter<EWSPerAdditionalPageFeeChangedEvent>

export interface EWSPerSubdomainFeeChangedEventObject {
  perSubdomainFeeFrom: BigNumber
  perSubdomainFeeTo: BigNumber
}
export type EWSPerSubdomainFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EWSPerSubdomainFeeChangedEventObject
>

export type EWSPerSubdomainFeeChangedEventFilter =
  TypedEventFilter<EWSPerSubdomainFeeChangedEvent>

export interface EWSSubdomainRemovedEventObject {
  name: string
  node: string
  subdomain: string
  label: string
}
export type EWSSubdomainRemovedEvent = TypedEvent<
  [string, string, string, string],
  EWSSubdomainRemovedEventObject
>

export type EWSSubdomainRemovedEventFilter =
  TypedEventFilter<EWSSubdomainRemovedEvent>

export interface EWSTypeUpdateEventObject {
  node: string
  label: string
  ewsTypeFrom: number
  ewsTypeTo: number
}
export type EWSTypeUpdateEvent = TypedEvent<
  [string, string, number, number],
  EWSTypeUpdateEventObject
>

export type EWSTypeUpdateEventFilter = TypedEventFilter<EWSTypeUpdateEvent>

export interface EWSUpdateEventObject {
  node: string
  label: string
  landingPageFrom: string
  landingPageTo: string
}
export type EWSUpdateEvent = TypedEvent<
  [string, string, string, string],
  EWSUpdateEventObject
>

export type EWSUpdateEventFilter = TypedEventFilter<EWSUpdateEvent>

export interface RevenueAccountChangedEventObject {
  from: string
  to: string
}
export type RevenueAccountChangedEvent = TypedEvent<
  [string, string],
  RevenueAccountChangedEventObject
>

export type RevenueAccountChangedEventFilter =
  TypedEventFilter<RevenueAccountChangedEvent>

export interface RevenueWithdrawnEventObject {
  to: string
  amount: BigNumber
}
export type RevenueWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  RevenueWithdrawnEventObject
>

export type RevenueWithdrawnEventFilter =
  TypedEventFilter<RevenueWithdrawnEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface EWS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: EWSInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<[string]>

    appendAllowedPages(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      moreAllowedPages: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { disallowMaintainer: boolean }>

    dc(overrides?: CallOverrides): Promise<[string]>

    getAllowMaintainerAccess(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>

    getAllowedPagesSlice(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>

    getFees(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      numAdditionalPages: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getLandingPage(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getNumAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getSubdomains(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    landingPageFee(overrides?: CallOverrides): Promise<[BigNumber]>

    perAdditionalPageFee(overrides?: CallOverrides): Promise<[BigNumber]>

    perSubdomainFee(overrides?: CallOverrides): Promise<[BigNumber]>

    remove(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revenueAccount(overrides?: CallOverrides): Promise<[string]>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDc(
      _dc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setLandingPageFee(
      _landingPageFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPerAdditionalPageFee(
      _perAdditionalPageFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPerSubdomainFee(
      _perSubdomainFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setRevenueAccount(
      _revenueAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    toggleMaintainerAccess(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    update(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      ewsType: PromiseOrValue<BigNumberish>,
      landingPage: PromiseOrValue<string>,
      allowedPages: PromiseOrValue<string>[],
      landingPageOnly: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  MAINTAINER_ROLE(overrides?: CallOverrides): Promise<string>

  appendAllowedPages(
    name: PromiseOrValue<string>,
    subdomain: PromiseOrValue<string>,
    moreAllowedPages: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  configs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  dc(overrides?: CallOverrides): Promise<string>

  getAllowMaintainerAccess(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  getAllowedPages(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>

  getAllowedPagesSlice(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>

  getFees(
    name: PromiseOrValue<string>,
    subdomain: PromiseOrValue<string>,
    numAdditionalPages: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getLandingPage(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  getNumAllowedPages(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  getSubdomains(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  landingPageFee(overrides?: CallOverrides): Promise<BigNumber>

  perAdditionalPageFee(overrides?: CallOverrides): Promise<BigNumber>

  perSubdomainFee(overrides?: CallOverrides): Promise<BigNumber>

  remove(
    name: PromiseOrValue<string>,
    subdomain: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revenueAccount(overrides?: CallOverrides): Promise<string>

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setDc(
    _dc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setLandingPageFee(
    _landingPageFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPerAdditionalPageFee(
    _perAdditionalPageFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPerSubdomainFee(
    _perSubdomainFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setRevenueAccount(
    _revenueAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  toggleMaintainerAccess(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  update(
    name: PromiseOrValue<string>,
    subdomain: PromiseOrValue<string>,
    ewsType: PromiseOrValue<BigNumberish>,
    landingPage: PromiseOrValue<string>,
    allowedPages: PromiseOrValue<string>[],
    landingPageOnly: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<string>

    appendAllowedPages(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      moreAllowedPages: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    dc(overrides?: CallOverrides): Promise<string>

    getAllowMaintainerAccess(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    getAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>

    getAllowedPagesSlice(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>

    getFees(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      numAdditionalPages: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLandingPage(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    getNumAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    getSubdomains(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    landingPageFee(overrides?: CallOverrides): Promise<BigNumber>

    perAdditionalPageFee(overrides?: CallOverrides): Promise<BigNumber>

    perSubdomainFee(overrides?: CallOverrides): Promise<BigNumber>

    remove(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    revenueAccount(overrides?: CallOverrides): Promise<string>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    setDc(_dc: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    setLandingPageFee(
      _landingPageFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setPerAdditionalPageFee(
      _perAdditionalPageFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setPerSubdomainFee(
      _perSubdomainFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setRevenueAccount(
      _revenueAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    toggleMaintainerAccess(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    update(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      ewsType: PromiseOrValue<BigNumberish>,
      landingPage: PromiseOrValue<string>,
      allowedPages: PromiseOrValue<string>[],
      landingPageOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'EWSActivated(string,bytes32,string,bytes32)'(
      name?: null,
      node?: PromiseOrValue<BytesLike> | null,
      subdomain?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): EWSActivatedEventFilter
    EWSActivated(
      name?: null,
      node?: PromiseOrValue<BytesLike> | null,
      subdomain?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): EWSActivatedEventFilter

    'EWSAdditionPageUpdate(bytes32,bytes32,string[],string[])'(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      additionalPagesFrom?: null,
      additionalPagesTo?: null
    ): EWSAdditionPageUpdateEventFilter
    EWSAdditionPageUpdate(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      additionalPagesFrom?: null,
      additionalPagesTo?: null
    ): EWSAdditionPageUpdateEventFilter

    'EWSAppendedAdditionalPages(bytes32,bytes32,string[])'(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      additionalPages?: null
    ): EWSAppendedAdditionalPagesEventFilter
    EWSAppendedAdditionalPages(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      additionalPages?: null
    ): EWSAppendedAdditionalPagesEventFilter

    'EWSDCContractChanged(address,address)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): EWSDCContractChangedEventFilter
    EWSDCContractChanged(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): EWSDCContractChangedEventFilter

    'EWSLandingPageFeeChanged(uint256,uint256)'(
      landingPageFeeFrom?: null,
      landingPageFeeTo?: null
    ): EWSLandingPageFeeChangedEventFilter
    EWSLandingPageFeeChanged(
      landingPageFeeFrom?: null,
      landingPageFeeTo?: null
    ): EWSLandingPageFeeChangedEventFilter

    'EWSMaintainerPermissionChanged(bytes32,bool)'(
      node?: PromiseOrValue<BytesLike> | null,
      maintainerAllowed?: null
    ): EWSMaintainerPermissionChangedEventFilter
    EWSMaintainerPermissionChanged(
      node?: PromiseOrValue<BytesLike> | null,
      maintainerAllowed?: null
    ): EWSMaintainerPermissionChangedEventFilter

    'EWSPerAdditionalPageFeeChanged(uint256,uint256)'(
      perAdditionalPageFeeFrom?: null,
      perAdditionalPageFeeTo?: null
    ): EWSPerAdditionalPageFeeChangedEventFilter
    EWSPerAdditionalPageFeeChanged(
      perAdditionalPageFeeFrom?: null,
      perAdditionalPageFeeTo?: null
    ): EWSPerAdditionalPageFeeChangedEventFilter

    'EWSPerSubdomainFeeChanged(uint256,uint256)'(
      perSubdomainFeeFrom?: null,
      perSubdomainFeeTo?: null
    ): EWSPerSubdomainFeeChangedEventFilter
    EWSPerSubdomainFeeChanged(
      perSubdomainFeeFrom?: null,
      perSubdomainFeeTo?: null
    ): EWSPerSubdomainFeeChangedEventFilter

    'EWSSubdomainRemoved(string,bytes32,string,bytes32)'(
      name?: null,
      node?: PromiseOrValue<BytesLike> | null,
      subdomain?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): EWSSubdomainRemovedEventFilter
    EWSSubdomainRemoved(
      name?: null,
      node?: PromiseOrValue<BytesLike> | null,
      subdomain?: null,
      label?: PromiseOrValue<BytesLike> | null
    ): EWSSubdomainRemovedEventFilter

    'EWSTypeUpdate(bytes32,bytes32,uint8,uint8)'(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      ewsTypeFrom?: null,
      ewsTypeTo?: null
    ): EWSTypeUpdateEventFilter
    EWSTypeUpdate(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      ewsTypeFrom?: null,
      ewsTypeTo?: null
    ): EWSTypeUpdateEventFilter

    'EWSUpdate(bytes32,bytes32,string,string)'(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      landingPageFrom?: null,
      landingPageTo?: null
    ): EWSUpdateEventFilter
    EWSUpdate(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null,
      landingPageFrom?: null,
      landingPageTo?: null
    ): EWSUpdateEventFilter

    'RevenueAccountChanged(address,address)'(
      from?: PromiseOrValue<string> | null,
      to?: null
    ): RevenueAccountChangedEventFilter
    RevenueAccountChanged(
      from?: PromiseOrValue<string> | null,
      to?: null
    ): RevenueAccountChangedEventFilter

    'RevenueWithdrawn(address,uint256)'(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RevenueWithdrawnEventFilter
    RevenueWithdrawn(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RevenueWithdrawnEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    appendAllowedPages(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      moreAllowedPages: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dc(overrides?: CallOverrides): Promise<BigNumber>

    getAllowMaintainerAccess(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAllowedPagesSlice(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFees(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      numAdditionalPages: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLandingPage(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNumAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSubdomains(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    landingPageFee(overrides?: CallOverrides): Promise<BigNumber>

    perAdditionalPageFee(overrides?: CallOverrides): Promise<BigNumber>

    perSubdomainFee(overrides?: CallOverrides): Promise<BigNumber>

    remove(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revenueAccount(overrides?: CallOverrides): Promise<BigNumber>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setDc(
      _dc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setLandingPageFee(
      _landingPageFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPerAdditionalPageFee(
      _perAdditionalPageFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPerSubdomainFee(
      _perSubdomainFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setRevenueAccount(
      _revenueAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    toggleMaintainerAccess(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    update(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      ewsType: PromiseOrValue<BigNumberish>,
      landingPage: PromiseOrValue<string>,
      allowedPages: PromiseOrValue<string>[],
      landingPageOnly: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    appendAllowedPages(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      moreAllowedPages: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    dc(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAllowMaintainerAccess(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAllowedPagesSlice(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFees(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      numAdditionalPages: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLandingPage(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNumAllowedPages(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSubdomains(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    landingPageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    perAdditionalPageFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    perSubdomainFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    remove(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revenueAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setDc(
      _dc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setLandingPageFee(
      _landingPageFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPerAdditionalPageFee(
      _perAdditionalPageFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPerSubdomainFee(
      _perSubdomainFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setRevenueAccount(
      _revenueAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    toggleMaintainerAccess(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    update(
      name: PromiseOrValue<string>,
      subdomain: PromiseOrValue<string>,
      ewsType: PromiseOrValue<BigNumberish>,
      landingPage: PromiseOrValue<string>,
      allowedPages: PromiseOrValue<string>[],
      landingPageOnly: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
