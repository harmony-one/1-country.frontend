/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface EASInterface extends utils.Interface {
  functions: {
    'SEPARATOR()': FunctionFragment
    'activate(string,bytes32,bytes32,string)': FunctionFragment
    'configs(bytes32)': FunctionFragment
    'dc()': FunctionFragment
    'deactivate(string,bytes32)': FunctionFragment
    'deactivateAll(string)': FunctionFragment
    'getCommitment(bytes32,bytes32)': FunctionFragment
    'getNumAlias(bytes32)': FunctionFragment
    'getPublicAliases(bytes32)': FunctionFragment
    'maxNumAlias()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setDc(address)': FunctionFragment
    'setMaxNumAlias(uint256)': FunctionFragment
    'setPublicAliases(string,string[])': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'verify(string,bytes32,string,string,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'SEPARATOR'
      | 'activate'
      | 'configs'
      | 'dc'
      | 'deactivate'
      | 'deactivateAll'
      | 'getCommitment'
      | 'getNumAlias'
      | 'getPublicAliases'
      | 'maxNumAlias'
      | 'owner'
      | 'renounceOwnership'
      | 'setDc'
      | 'setMaxNumAlias'
      | 'setPublicAliases'
      | 'transferOwnership'
      | 'verify'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'SEPARATOR', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'activate',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'configs',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'dc', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'deactivate',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'deactivateAll',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'getCommitment',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getNumAlias',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'getPublicAliases',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'maxNumAlias',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setDc',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxNumAlias',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setPublicAliases',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'verify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string

  decodeFunctionResult(functionFragment: 'SEPARATOR', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'configs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dc', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deactivate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'deactivateAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCommitment',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNumAlias', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getPublicAliases',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'maxNumAlias', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setDc', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setMaxNumAlias',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPublicAliases',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface EAS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: EASInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    SEPARATOR(overrides?: CallOverrides): Promise<[string]>

    activate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      commitment: PromiseOrValue<BytesLike>,
      publicAlias: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numAlias: BigNumber }>

    dc(overrides?: CallOverrides): Promise<[string]>

    deactivate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deactivateAll(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getCommitment(
      node: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    getNumAlias(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getPublicAliases(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>

    maxNumAlias(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDc(
      _dc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMaxNumAlias(
      _maxNumAlias: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPublicAliases(
      name: PromiseOrValue<string>,
      aliases: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    verify(
      name: PromiseOrValue<string>,
      msgHash: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<string>,
      forwardAddress: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>
  }

  SEPARATOR(overrides?: CallOverrides): Promise<string>

  activate(
    name: PromiseOrValue<string>,
    aliasName: PromiseOrValue<BytesLike>,
    commitment: PromiseOrValue<BytesLike>,
    publicAlias: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  configs(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  dc(overrides?: CallOverrides): Promise<string>

  deactivate(
    name: PromiseOrValue<string>,
    aliasName: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  deactivateAll(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getCommitment(
    node: PromiseOrValue<BytesLike>,
    aliasName: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  getNumAlias(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPublicAliases(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>

  maxNumAlias(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setDc(
    _dc: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMaxNumAlias(
    _maxNumAlias: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPublicAliases(
    name: PromiseOrValue<string>,
    aliases: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  verify(
    name: PromiseOrValue<string>,
    msgHash: PromiseOrValue<BytesLike>,
    aliasName: PromiseOrValue<string>,
    forwardAddress: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>

  callStatic: {
    SEPARATOR(overrides?: CallOverrides): Promise<string>

    activate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      commitment: PromiseOrValue<BytesLike>,
      publicAlias: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dc(overrides?: CallOverrides): Promise<string>

    deactivate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    deactivateAll(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    getCommitment(
      node: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    getNumAlias(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPublicAliases(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>

    maxNumAlias(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setDc(_dc: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    setMaxNumAlias(
      _maxNumAlias: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setPublicAliases(
      name: PromiseOrValue<string>,
      aliases: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    verify(
      name: PromiseOrValue<string>,
      msgHash: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<string>,
      forwardAddress: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

    activate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      commitment: PromiseOrValue<BytesLike>,
      publicAlias: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dc(overrides?: CallOverrides): Promise<BigNumber>

    deactivate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    deactivateAll(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getCommitment(
      node: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNumAlias(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPublicAliases(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    maxNumAlias(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setDc(
      _dc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMaxNumAlias(
      _maxNumAlias: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPublicAliases(
      name: PromiseOrValue<string>,
      aliases: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    verify(
      name: PromiseOrValue<string>,
      msgHash: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<string>,
      forwardAddress: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    activate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      commitment: PromiseOrValue<BytesLike>,
      publicAlias: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    configs(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    dc(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deactivate(
      name: PromiseOrValue<string>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    deactivateAll(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getCommitment(
      node: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNumAlias(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPublicAliases(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    maxNumAlias(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setDc(
      _dc: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMaxNumAlias(
      _maxNumAlias: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPublicAliases(
      name: PromiseOrValue<string>,
      aliases: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    verify(
      name: PromiseOrValue<string>,
      msgHash: PromiseOrValue<BytesLike>,
      aliasName: PromiseOrValue<string>,
      forwardAddress: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
